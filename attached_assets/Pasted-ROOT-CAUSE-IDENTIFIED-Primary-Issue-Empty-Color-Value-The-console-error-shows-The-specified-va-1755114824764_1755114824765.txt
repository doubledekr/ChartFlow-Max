ROOT CAUSE IDENTIFIED üéØ
Primary Issue: Empty Color Value
The console error shows: "The specified value "" does not conform to the required format. The format is "#rrggbb"
This indicates that gridlines are being created but with an empty/invalid color value, making them invisible on the canvas.
SPECIFIC PROBLEMS
1. Color Value Issue
Gridlines are being added to the canvas (you can see the layers appear)
But they have an empty color value ("" instead of a valid hex color like "#cccccc")
This makes them invisible even though they exist as Fabric.js objects
2. Likely Code Location
The issue is probably in your gridline creation function where you're setting the stroke property:
JavaScript
// This is likely what's happening (BROKEN):
const gridLine = new fabric.Line([x1, y1, x2, y2], {
  stroke: "", // Empty string - PROBLEM!
  strokeWidth: 1,
  selectable: false
});

// Should be (FIXED):
const gridLine = new fabric.Line([x1, y1, x2, y2], {
  stroke: "#cccccc", // Valid hex color
  strokeWidth: 1,
  selectable: false
});
IMMEDIATE SOLUTIONS üîß
Solution 1: Quick Fix (Add Default Color)
Find your gridline creation code and ensure it has a valid default color:
JavaScript
// In your gridline creation function
const createGridLines = (showHorizontal, showVertical, gridColor = "#cccccc") => {
  // Ensure gridColor is never empty
  const safeGridColor = gridColor || "#cccccc";
  
  if (showHorizontal) {
    // Create horizontal gridlines with safe color
    const hLine = new fabric.Line([x1, y1, x2, y2], {
      stroke: safeGridColor, // Use safe color
      strokeWidth: 1,
      opacity: 0.3,
      selectable: false,
      evented: false
    });
    canvas.add(hLine);
  }
};
Solution 2: Check State/Props
Verify that your gridline color state/props aren't undefined:
JavaScript
// Check your state management
const [gridSettings, setGridSettings] = useState({
  showHorizontal: false,
  showVertical: false,
  gridColor: "#cccccc", // Ensure this has a default value
  gridOpacity: 0.3
});

// When updating gridlines
const updateGridLines = () => {
  const color = gridSettings.gridColor || "#cccccc"; // Fallback
  // ... rest of gridline logic
};
Solution 3: Input Validation
Add validation to prevent empty color values:
JavaScript
const validateGridColor = (color) => {
  // Check if color is valid hex format
  const hexRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
  return hexRegex.test(color) ? color : "#cccccc";
};

// Use in gridline creation
const safeColor = validateGridColor(userInputColor);
DEBUGGING STEPS üîç
1. Check Current Gridline Objects
Add this to your browser console to inspect existing gridlines:
JavaScript
// In browser console
const canvas = window.fabricCanvas; // Adjust based on your global reference
const gridLines = canvas.getObjects().filter(obj => obj.type === 'line');
console.log('Gridlines found:', gridLines.length);
gridLines.forEach((line, i) => {
  console.log(`Gridline ${i}:`, {
    stroke: line.stroke,
    strokeWidth: line.strokeWidth,
    opacity: line.opacity,
    visible: line.visible
  });
});
2. Test Manual Gridline Creation
Try creating a gridline manually to confirm the fix:
JavaScript
// Test in browser console
const testLine = new fabric.Line([100, 100, 400, 100], {
  stroke: "#ff0000", // Red for visibility
  strokeWidth: 2,
  selectable: false
});
canvas.add(testLine);
canvas.renderAll();
MOST LIKELY FIX LOCATION üìç
Look for code similar to this pattern in your codebase:
JavaScript
// Find this pattern (BROKEN):
stroke: gridColor || "", // This creates empty string!

// Replace with (FIXED):
stroke: gridColor || "#cccccc", // This provides fallback!
VERIFICATION
After implementing the fix:
‚úÖ Toggle gridlines on - should see visible lines
‚úÖ No console errors - color validation working
‚úÖ Gridlines appear in layers - objects created successfully
‚úÖ Gridlines visible on canvas - rendering correctly
The solution is straightforward: ensure your gridline creation code never passes an empty string for the stroke color. Add proper defaults and validation, and your gridlines will appear correctly on the canvas.