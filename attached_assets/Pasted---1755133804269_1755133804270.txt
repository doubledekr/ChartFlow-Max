 
      /////////////////////
   ///////////////////////////
  ////////@@@@@@@//////////////
  ////////@@@@@@@//////////////
  ////////@@@@@@@//////////////        Curious and driven?
  ///////////////@@@@@@@///////        Work with us!
  ///////////////@@@@@@@///////
  ///////////////@@@@@@@///////        https://join.replit.com/hack.with.us
  ////////@@@@@@@//////////////
  ////////@@@@@@@//////////////
  ////////@@@@@@#//////////////
   ///////////////////////////
      /////////////////////
      
 [LaunchDarkly] LaunchDarkly client initialized
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
ChartFlow-Max:1 Uncaught (in promise) 
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
Error while parsing the 'sandbox' attribute: 'allow-downloads-without-user-activation' is an invalid sandbox flag.
 Unrecognized feature: 'ambient-light-sensor'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'battery'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'execution-while-not-rendered'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'execution-while-out-of-viewport'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'layout-animations'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'legacy-image-formats'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'navigation-override'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'oversized-images'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'publickey-credentials'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'speaker-selection'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'unoptimized-images'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'unsized-media'.
_ @ framework-96c91b113844291c.js:1
 Unrecognized feature: 'pointer-lock'.
_ @ framework-96c91b113844291c.js:1
 Allow attribute will take precedence over 'allowfullscreen'.
_ @ framework-96c91b113844291c.js:1
 Allow attribute will take precedence over 'allowpaymentrequest'.
_ @ framework-96c91b113844291c.js:1
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'ambient-light-sensor'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'battery'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'execution-while-not-rendered'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'execution-while-out-of-viewport'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'layout-animations'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'legacy-image-formats'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'navigation-override'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'oversized-images'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'publickey-credentials'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'speaker-selection'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'unoptimized-images'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Unrecognized feature: 'unsized-media'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Allow attribute will take precedence over 'allowfullscreen'.
workspace_iframe.html?initialPath=%2F&id=%3Ar3bb%3A:32 Allow attribute will take precedence over 'allowpaymentrequest'.
 [vite] connecting...
 [vite] connected.
 ElementPropertiesPanel - selectedElement: null
 ElementPropertiesPanel - properties: null
 üîç DATA STATE CHANGED - Length: 0 First item: undefined
 üìä FinancialChartCanvas - Received props: symbol="AAPL", timeframe="1Y"
 üîç EFFECT TRIGGERED - Current data length: 0
 üîç CALLING loadStockData() - This will reset data to loading state
 üìä Loading data for symbol: AAPL, timeframe: 1Y
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
The provided value 'alphabetical' is not a valid enum value of type CanvasTextBaseline.
67d2f59d-4415-4c6d-9eca-208c016d407e-00-1c7bdjzntech3.janeway.replit.dev/api/logos:1  Failed to load resource: the server responded with a status of 401 (Unauthorized)
 ElementPropertiesPanel - selectedElement: null
 ElementPropertiesPanel - properties: null
67d2f59d-4415-4c6d-9eca-208c016d407e-00-1c7bdjzntech3.janeway.replit.dev/api/templates:1  Failed to load resource: the server responded with a status of 401 (Unauthorized)
67d2f59d-4415-4c6d-9eca-208c016d407e-00-1c7bdjzntech3.janeway.replit.dev/api/instances:1  Failed to load resource: the server responded with a status of 401 (Unauthorized)
 ElementPropertiesPanel - selectedElement: null
Console.js:61 ElementPropertiesPanel - properties: null
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: Object
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection created: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 Object added: source-attribution
Console.js:61 ‚úÖ Added new source attribution
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i
Console.js:61 ElementPropertiesPanel - properties: Object
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: Object
Console.js:61 üîç CURVE STYLE DEBUG - User selected: linear
Console.js:61 üîç CURVE STYLE DEBUG - Converted to smoothness: 0.1
Console.js:61 üîç CURVE STYLE DEBUG - Current smoothness in properties: 0.5
Console.js:61 üîß Chart Designer - Handling chart line property update: smoothness = 0.1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: smoothness = 0.1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: smoothness Value: 0.1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: Object
Console.js:61 Active object from Fabric: i
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: Object
Console.js:61 New properties object: Object
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying smoothness = 0.1 to chart line...
Console.js:61 Before: smoothness = undefined
Console.js:61 üîÑ SMOOTHNESS CHANGE - Old value: undefined, New value: 0.1
Console.js:61 üîÑ SMOOTHNESS CHANGE - Chart line strokeWidth before regeneration: 3
Console.js:61 üîÑ SMOOTHNESS CHANGE - Chart line opacity before regeneration: 1
Console.js:61 üîÑ SMOOTHNESS CHANGE - Chart line stroke before regeneration: #3b82f6
Console.js:61 smoothness requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: Object
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i
Console.js:61 ElementPropertiesPanel - properties: Object
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: Object
Console.js:61 üîÑ REGENERATING chart with smoothness = 0.1
Console.js:61 üîÑ Passing properties to regeneration: Object
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: Object
Console.js:61 üîÑ Current smoothness value: 0.1
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? Object
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìù Canvas state saved. History length: 2, Current index: 1
Console.js:61 ElementPropertiesPanel - selectedElement: i
Console.js:61 ElementPropertiesPanel - properties: Object
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: Object
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: Object
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.1
Console.js:61 üìä Using LINEAR curve for sharp angles (avoiding step artifacts)
Console.js:61 üìä Generated single symbol path data with smoothness: 0.1 Path length: 3938
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i
Console.js:61 ElementPropertiesPanel - properties: Object
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: Object
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeDashArray = (2)¬†[5, 5]
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeDashArray = (2)¬†[5, 5]
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeDashArray Value: (2)¬†[5, 5]
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeDashArray = 5,5 to chart line...
Console.js:61 Before: strokeDashArray = null
Console.js:61 ‚úÖ Applied strokeDashArray = 5,5 directly to chart line
Console.js:61 After: strokeDashArray = (2)¬†[5, 5]
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 4
Console.js:61 Total objects on canvas: 9
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeDashArray = 5,5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 3, Current index: 2
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeLineCap = butt
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeLineCap = butt
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeLineCap Value: butt
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeLineCap = butt to chart line...
Console.js:61 Before: strokeLineCap = round
Console.js:61 ‚úÖ Applied strokeLineCap = butt directly to chart line
Console.js:61 After: strokeLineCap = butt
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 4
Console.js:61 Total objects on canvas: 9
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeLineCap = butt
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'butt',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 4, Current index: 3
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'butt',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showMarkers = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showMarkers = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showMarkers Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'butt',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showMarkers = true to chart line...
Console.js:61 Before: showMarkers = undefined
Console.js:61 showMarkers requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'butt',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showMarkers = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìù Canvas state saved. History length: 5, Current index: 4
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'butt',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showMarkers = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showMarkers = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showMarkers Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showMarkers = true to chart line...
Console.js:61 Before: showMarkers = undefined
Console.js:61 showMarkers requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showMarkers = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 6, Current index: 5
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showJunctions = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showJunctions = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showJunctions Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showJunctions = true to chart line...
Console.js:61 Before: showJunctions = undefined
Console.js:61 showJunctions requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showJunctions = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 7, Current index: 6
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showJunctions = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showJunctions = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showJunctions Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showJunctions = true to chart line...
Console.js:61 Before: showJunctions = undefined
Console.js:61 showJunctions requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showJunctions = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 üìù Canvas state saved. History length: 8, Current index: 7
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 4 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 4 directly to chart line
Console.js:61 After: strokeWidth = 4
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 4
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 4
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 5
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 5 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 5 directly to chart line
Console.js:61 After: strokeWidth = 5
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 5
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 5 to chart line...
Console.js:61 Before: strokeWidth = 5
Console.js:61 ‚úÖ Applied strokeWidth = 5 directly to chart line
Console.js:61 After: strokeWidth = 5
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 5, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 7
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 7 to chart line...
Console.js:61 Before: strokeWidth = 5
Console.js:61 ‚úÖ Applied strokeWidth = 7 directly to chart line
Console.js:61 After: strokeWidth = 7
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 8
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 8 to chart line...
Console.js:61 Before: strokeWidth = 7
Console.js:61 ‚úÖ Applied strokeWidth = 8 directly to chart line
Console.js:61 After: strokeWidth = 8
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 9
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 9
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 9
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 9, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 9 to chart line...
 Before: strokeWidth = 8
 ‚úÖ Applied strokeWidth = 9 directly to chart line
 After: strokeWidth = 9
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 9, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 9
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 üîß Chart Designer - Handling chart line property update: strokeWidth = 10
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 10
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 10
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 9, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 9, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 10, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 10 to chart line...
 Before: strokeWidth = 9
 ‚úÖ Applied strokeWidth = 10 directly to chart line
 After: strokeWidth = 10
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 10
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 10
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 10
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 10
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 10, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 10 to chart line...
 Before: strokeWidth = 10
 ‚úÖ Applied strokeWidth = 10 directly to chart line
 After: strokeWidth = 10
 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 10
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 10, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 11
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 11
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 11
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 11, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 11 to chart line...
Console.js:61 Before: strokeWidth = 10
Console.js:61 ‚úÖ Applied strokeWidth = 11 directly to chart line
Console.js:61 After: strokeWidth = 11
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 11, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 11
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 11
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 11
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 11
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 11, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 11, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 11, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 11 to chart line...
Console.js:61 Before: strokeWidth = 11
Console.js:61 ‚úÖ Applied strokeWidth = 11 directly to chart line
Console.js:61 After: strokeWidth = 11
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 11, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 11
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 12
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 11, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 11, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 12 to chart line...
Console.js:61 Before: strokeWidth = 11
Console.js:61 ‚úÖ Applied strokeWidth = 12 directly to chart line
Console.js:61 After: strokeWidth = 12
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 12
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 12 to chart line...
 Before: strokeWidth = 12
 ‚úÖ Applied strokeWidth = 12 directly to chart line
 After: strokeWidth = 12
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 12
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 12 to chart line...
 Before: strokeWidth = 12
 ‚úÖ Applied strokeWidth = 12 directly to chart line
 After: strokeWidth = 12
 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 12
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 12 to chart line...
Console.js:61 Before: strokeWidth = 12
Console.js:61 ‚úÖ Applied strokeWidth = 12 directly to chart line
Console.js:61 After: strokeWidth = 12
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 12
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 12 to chart line...
Console.js:61 Before: strokeWidth = 12
Console.js:61 ‚úÖ Applied strokeWidth = 12 directly to chart line
Console.js:61 After: strokeWidth = 12
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 12
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 12 to chart line...
Console.js:61 Before: strokeWidth = 12
Console.js:61 ‚úÖ Applied strokeWidth = 12 directly to chart line
Console.js:61 After: strokeWidth = 12
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 üìù Canvas state saved. History length: 9, Current index: 8
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 11
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 11
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 11
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 11, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 11 to chart line...
Console.js:61 Before: strokeWidth = 12
Console.js:61 ‚úÖ Applied strokeWidth = 11 directly to chart line
Console.js:61 After: strokeWidth = 11
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 11, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 11
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 11, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 11, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 10
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 10
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 10
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 11, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 11, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 10, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 10 to chart line...
Console.js:61 Before: strokeWidth = 11
Console.js:61 ‚úÖ Applied strokeWidth = 10 directly to chart line
Console.js:61 After: strokeWidth = 10
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 10
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 10, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 8
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 8 to chart line...
Console.js:61 Before: strokeWidth = 10
Console.js:61 ‚úÖ Applied strokeWidth = 8 directly to chart line
Console.js:61 After: strokeWidth = 8
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
Console.js:61 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 8
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 8 to chart line...
 Before: strokeWidth = 8
 ‚úÖ Applied strokeWidth = 8 directly to chart line
 After: strokeWidth = 8
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 7
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 7 to chart line...
 Before: strokeWidth = 8
 ‚úÖ Applied strokeWidth = 7 directly to chart line
 After: strokeWidth = 7
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 7, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 6
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 6 to chart line...
Console.js:61 Before: strokeWidth = 7
Console.js:61 ‚úÖ Applied strokeWidth = 6 directly to chart line
Console.js:61 After: strokeWidth = 6
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 5
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 5 to chart line...
Console.js:61 Before: strokeWidth = 6
Console.js:61 ‚úÖ Applied strokeWidth = 5 directly to chart line
Console.js:61 After: strokeWidth = 5
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 5
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 5 to chart line...
Console.js:61 Before: strokeWidth = 5
Console.js:61 ‚úÖ Applied strokeWidth = 5 directly to chart line
Console.js:61 After: strokeWidth = 5
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 5, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 4
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 5
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 4
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 4
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 4, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 4
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 10, Current index: 9
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 11, Current index: 10
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 2
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 2 to chart line...
 Before: strokeWidth = 2
 ‚úÖ Applied strokeWidth = 2 directly to chart line
 After: strokeWidth = 2
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 2
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 2 to chart line...
 Before: strokeWidth = 2
 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 4 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 4 directly to chart line
Console.js:61 After: strokeWidth = 4
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 4, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 5
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 5 to chart line...
Console.js:61 Before: strokeWidth = 4
Console.js:61 ‚úÖ Applied strokeWidth = 5 directly to chart line
Console.js:61 After: strokeWidth = 5
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 5, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 6
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 6 to chart line...
Console.js:61 Before: strokeWidth = 5
Console.js:61 ‚úÖ Applied strokeWidth = 6 directly to chart line
Console.js:61 After: strokeWidth = 6
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 6, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 5
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 5 to chart line...
Console.js:61 Before: strokeWidth = 6
Console.js:61 ‚úÖ Applied strokeWidth = 5 directly to chart line
Console.js:61 After: strokeWidth = 5
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 5, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 5
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 3
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 3 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 3 directly to chart line
 After: strokeWidth = 3
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Force repaint renderAll() after timeout...
 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 2
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 2 to chart line...
 Before: strokeWidth = 3
 ‚úÖ Applied strokeWidth = 2 directly to chart line
 After: strokeWidth = 2
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 2
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 2 to chart line...
 Before: strokeWidth = 2
 ‚úÖ Applied strokeWidth = 2 directly to chart line
 After: strokeWidth = 2
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 3
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 3 to chart line...
 Before: strokeWidth = 2
 ‚úÖ Applied strokeWidth = 3 directly to chart line
 After: strokeWidth = 3
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 3
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 3 to chart line...
 Before: strokeWidth = 3
 ‚úÖ Applied strokeWidth = 3 directly to chart line
 After: strokeWidth = 3
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 5
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 5 to chart line...
 Before: strokeWidth = 3
 ‚úÖ Applied strokeWidth = 5 directly to chart line
 After: strokeWidth = 5
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 5
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 5 to chart line...
 Before: strokeWidth = 5
 ‚úÖ Applied strokeWidth = 5 directly to chart line
 After: strokeWidth = 5
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 5
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 5 to chart line...
 Before: strokeWidth = 5
 ‚úÖ Applied strokeWidth = 5 directly to chart line
 After: strokeWidth = 5
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 5, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 6
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 6 to chart line...
Console.js:61 Before: strokeWidth = 5
Console.js:61 ‚úÖ Applied strokeWidth = 6 directly to chart line
Console.js:61 After: strokeWidth = 6
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 6
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 6 to chart line...
Console.js:61 Before: strokeWidth = 6
Console.js:61 ‚úÖ Applied strokeWidth = 6 directly to chart line
Console.js:61 After: strokeWidth = 6
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 6
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 6 to chart line...
Console.js:61 Before: strokeWidth = 6
Console.js:61 ‚úÖ Applied strokeWidth = 6 directly to chart line
Console.js:61 After: strokeWidth = 6
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 6, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 6, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 4 to chart line...
Console.js:61 Before: strokeWidth = 6
Console.js:61 ‚úÖ Applied strokeWidth = 4 directly to chart line
Console.js:61 After: strokeWidth = 4
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 4, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 3
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 3 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 3 directly to chart line
 After: strokeWidth = 3
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 3
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 3 to chart line...
 Before: strokeWidth = 3
 ‚úÖ Applied strokeWidth = 3 directly to chart line
 After: strokeWidth = 3
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 2
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 2 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 2 directly to chart line
Console.js:61 After: strokeWidth = 2
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 üìù Canvas state saved. History length: 12, Current index: 11
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 2
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 4
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 4 to chart line...
 Before: strokeWidth = 3
 ‚úÖ Applied strokeWidth = 4 directly to chart line
 After: strokeWidth = 4
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 5
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 5
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 5
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 5, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 5 to chart line...
 Before: strokeWidth = 4
 ‚úÖ Applied strokeWidth = 5 directly to chart line
 After: strokeWidth = 5
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 5
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 5, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 6
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 5, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 5, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 6 to chart line...
 Before: strokeWidth = 5
 ‚úÖ Applied strokeWidth = 6 directly to chart line
 After: strokeWidth = 6
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 7
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 7 to chart line...
 Before: strokeWidth = 6
 ‚úÖ Applied strokeWidth = 7 directly to chart line
 After: strokeWidth = 7
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 7
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 7 to chart line...
 Before: strokeWidth = 7
 ‚úÖ Applied strokeWidth = 7 directly to chart line
 After: strokeWidth = 7
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 7, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 8
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 8 to chart line...
Console.js:61 Before: strokeWidth = 7
Console.js:61 ‚úÖ Applied strokeWidth = 8 directly to chart line
Console.js:61 After: strokeWidth = 8
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 8
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 8 to chart line...
Console.js:61 Before: strokeWidth = 8
Console.js:61 ‚úÖ Applied strokeWidth = 8 directly to chart line
Console.js:61 After: strokeWidth = 8
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 8
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 8 to chart line...
Console.js:61 Before: strokeWidth = 8
Console.js:61 ‚úÖ Applied strokeWidth = 8 directly to chart line
Console.js:61 After: strokeWidth = 8
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 8, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üìù Canvas state saved. History length: 13, Current index: 12
 üìù Canvas state saved. History length: 13, Current index: 12
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 8, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 7
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 7 to chart line...
 Before: strokeWidth = 8
 ‚úÖ Applied strokeWidth = 7 directly to chart line
 After: strokeWidth = 7
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 7
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 7 to chart line...
 Before: strokeWidth = 7
 ‚úÖ Applied strokeWidth = 7 directly to chart line
 After: strokeWidth = 7
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 6
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 6
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 6
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 6, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 6 to chart line...
 Before: strokeWidth = 7
 ‚úÖ Applied strokeWidth = 6 directly to chart line
Console.js:61 After: strokeWidth = 6
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 6
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 6, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 6, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 6, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 4 to chart line...
Console.js:61 Before: strokeWidth = 6
Console.js:61 ‚úÖ Applied strokeWidth = 4 directly to chart line
Console.js:61 After: strokeWidth = 4
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 4 to chart line...
Console.js:61 Before: strokeWidth = 4
Console.js:61 ‚úÖ Applied strokeWidth = 4 directly to chart line
Console.js:61 After: strokeWidth = 4
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 3
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 3 to chart line...
Console.js:61 Before: strokeWidth = 4
Console.js:61 ‚úÖ Applied strokeWidth = 3 directly to chart line
Console.js:61 After: strokeWidth = 3
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 2
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 2 to chart line...
 Before: strokeWidth = 3
 ‚úÖ Applied strokeWidth = 2 directly to chart line
 After: strokeWidth = 2
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 1
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 1 to chart line...
 Before: strokeWidth = 2
 ‚úÖ Applied strokeWidth = 1 directly to chart line
 After: strokeWidth = 1
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 1
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 1
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 1
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 1
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 1, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 1 to chart line...
Console.js:61 Before: strokeWidth = 1
Console.js:61 ‚úÖ Applied strokeWidth = 1 directly to chart line
Console.js:61 After: strokeWidth = 1
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 1
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 13, Current index: 12
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 14, Current index: 13
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üìù Canvas state saved. History length: 14, Current index: 13
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 1, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 2
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 2
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 2
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 1, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 1, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 2, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 2 to chart line...
 Before: strokeWidth = 1
 ‚úÖ Applied strokeWidth = 2 directly to chart line
 After: strokeWidth = 2
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 2
 === END PROPERTY UPDATE DEBUG ===
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 2, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 3
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 3
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 3
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 2, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 2, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 3 to chart line...
 Before: strokeWidth = 2
 ‚úÖ Applied strokeWidth = 3 directly to chart line
 After: strokeWidth = 3
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 3
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 4
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 4
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 4
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 4, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 4 to chart line...
Console.js:61 Before: strokeWidth = 3
Console.js:61 ‚úÖ Applied strokeWidth = 4 directly to chart line
Console.js:61 After: strokeWidth = 4
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 4
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 14, Current index: 13
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 4, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 7
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 7
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 7
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 4, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 4, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 7, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 7 to chart line...
Console.js:61 Before: strokeWidth = 4
Console.js:61 ‚úÖ Applied strokeWidth = 7 directly to chart line
Console.js:61 After: strokeWidth = 7
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 7
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üìù Canvas state saved. History length: 14, Current index: 13
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 8
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 8
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 8
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 7, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 7, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 8, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 8 to chart line...
Console.js:61 Before: strokeWidth = 7
Console.js:61 ‚úÖ Applied strokeWidth = 8 directly to chart line
Console.js:61 After: strokeWidth = 8
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 8
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 8, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 10
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 10
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 10
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 8, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 8, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 10, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 10 to chart line...
 Before: strokeWidth = 8
 ‚úÖ Applied strokeWidth = 10 directly to chart line
 After: strokeWidth = 10
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 10
 === END PROPERTY UPDATE DEBUG ===
 üìù Canvas state saved. History length: 14, Current index: 13
 üìù Canvas state saved. History length: 14, Current index: 13
 Force repaint renderAll() after timeout...
 Force repaint renderAll() after timeout...
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 10, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 12
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 10, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 10, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 12 to chart line...
 Before: strokeWidth = 10
 ‚úÖ Applied strokeWidth = 12 directly to chart line
 After: strokeWidth = 12
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
 === END PROPERTY UPDATE DEBUG ===
 üìù Canvas state saved. History length: 14, Current index: 13
 üîß Chart Designer - Handling chart line property update: strokeWidth = 12
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 12
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 12
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 12, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 12 to chart line...
 Before: strokeWidth = 12
 ‚úÖ Applied strokeWidth = 12 directly to chart line
 After: strokeWidth = 12
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 12
 === END PROPERTY UPDATE DEBUG ===
 üìù Canvas state saved. History length: 14, Current index: 13
 Force repaint renderAll() after timeout...
 üìù Canvas state saved. History length: 14, Current index: 13
 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
 ElementPropertiesPanel - elementType: financial-chart-line
 ElementPropertiesPanel - isChartGroup: true
 ElementPropertiesPanel - properties.properties: {strokeWidth: 12, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß Chart Designer - Handling chart line property update: strokeWidth = 13
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 13
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 13
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 12, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 12, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 13, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 13 to chart line...
 Before: strokeWidth = 12
 ‚úÖ Applied strokeWidth = 13 directly to chart line
 After: strokeWidth = 13
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 13, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 13
 === END PROPERTY UPDATE DEBUG ===
 üîß Chart Designer - Handling chart line property update: strokeWidth = 13
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 13
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 13
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 13, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 13, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 13, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 13 to chart line...
 Before: strokeWidth = 13
 ‚úÖ Applied strokeWidth = 13 directly to chart line
 After: strokeWidth = 13
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 13, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 13
 === END PROPERTY UPDATE DEBUG ===
 üìù Canvas state saved. History length: 14, Current index: 13
 Force repaint renderAll() after timeout...
 üîß Chart Designer - Handling chart line property update: strokeWidth = 14
 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 14
 === PROPERTY UPDATE DEBUG ===
 Property: strokeWidth Value: 14
 Selected chart line: null
 Chart line type: undefined
 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 13, strokeLineCap: 'round',¬†‚Ä¶}
 üîß FALLBACK: Using active object as chart line
 BEFORE UPDATE - Chart line properties: {strokeWidth: 13, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 New properties object: {strokeWidth: 14, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
 üîß CRITICAL: Data length before regeneration: 0
 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
 --- IMMEDIATE UPDATE ATTEMPT ---
 Fabric canvas exists: true
 Chart line object exists: true
 Applying strokeWidth = 14 to chart line...
 Before: strokeWidth = 13
 ‚úÖ Applied strokeWidth = 14 directly to chart line
 After: strokeWidth = 14
 Calling setCoords()...
 Setting dirty = true...
 Calling renderAll()...
 Calling requestRenderAll()...
 Chart line index on canvas: 8
 Total objects on canvas: 13
 ‚úÖ Immediate update completed successfully
 üöÄ immediateSuccess result: true
 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 14, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
 ‚úÖ IMMEDIATE UPDATE strokeWidth = 14
 === END PROPERTY UPDATE DEBUG ===
 Force repaint renderAll() after timeout...
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 14, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 14, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 15
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 15
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 15
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 14, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 14, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 15, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 15 to chart line...
Console.js:61 Before: strokeWidth = 14
Console.js:61 ‚úÖ Applied strokeWidth = 15 directly to chart line
Console.js:61 After: strokeWidth = 15
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 15, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 15
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 15
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 15
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 15
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 15, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 15, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 15, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 15 to chart line...
Console.js:61 Before: strokeWidth = 15
Console.js:61 ‚úÖ Applied strokeWidth = 15 directly to chart line
Console.js:61 After: strokeWidth = 15
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 15, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 15
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 15, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 15, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 16
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 16
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 16
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 15, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 15, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 16, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 16 to chart line...
Console.js:61 Before: strokeWidth = 15
Console.js:61 ‚úÖ Applied strokeWidth = 16 directly to chart line
Console.js:61 After: strokeWidth = 16
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 16, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 16
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 15, Current index: 14
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 15, Current index: 14
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 15, Current index: 14
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 15, Current index: 14
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 15, Current index: 14
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 15, Current index: 14
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 16, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 17
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 17
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 17
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 16, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 16, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 17, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 17 to chart line...
Console.js:61 Before: strokeWidth = 16
Console.js:61 ‚úÖ Applied strokeWidth = 17 directly to chart line
Console.js:61 After: strokeWidth = 17
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 17, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 17
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 17, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 18
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 18
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 18
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 17, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 18, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 18 to chart line...
Console.js:61 Before: strokeWidth = 17
Console.js:61 ‚úÖ Applied strokeWidth = 18 directly to chart line
Console.js:61 After: strokeWidth = 18
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 18, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 18
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 18, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 18, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 19
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 19
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 19
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 18, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 18, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 19, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 19 to chart line...
Console.js:61 Before: strokeWidth = 18
Console.js:61 ‚úÖ Applied strokeWidth = 19 directly to chart line
Console.js:61 After: strokeWidth = 19
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 19, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 19
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 19, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 19, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 20
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 20
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 20
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 19, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 19, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 20, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 20 to chart line...
Console.js:61 Before: strokeWidth = 19
Console.js:61 ‚úÖ Applied strokeWidth = 20 directly to chart line
Console.js:61 After: strokeWidth = 20
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 20, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 20
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 20, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 20, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 16, Current index: 15
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 20, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 20, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 19
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 19
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 19
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 20, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 20, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 19, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 19 to chart line...
Console.js:61 Before: strokeWidth = 20
Console.js:61 ‚úÖ Applied strokeWidth = 19 directly to chart line
Console.js:61 After: strokeWidth = 19
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 19, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 19
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 19, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 19, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 18
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 18
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 18
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 19, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 19, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 18, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 18 to chart line...
Console.js:61 Before: strokeWidth = 19
Console.js:61 ‚úÖ Applied strokeWidth = 18 directly to chart line
Console.js:61 After: strokeWidth = 18
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 18, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 18
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 18, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 18, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üîß Chart Designer - Handling chart line property update: strokeWidth = 17
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: strokeWidth = 17
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: strokeWidth Value: 17
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 18, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 18, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 17, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying strokeWidth = 17 to chart line...
Console.js:61 Before: strokeWidth = 18
Console.js:61 ‚úÖ Applied strokeWidth = 17 directly to chart line
Console.js:61 After: strokeWidth = 17
Console.js:61 Calling setCoords()...
Console.js:61 Setting dirty = true...
Console.js:61 Calling renderAll()...
Console.js:61 Calling requestRenderAll()...
Console.js:61 Chart line index on canvas: 8
Console.js:61 Total objects on canvas: 13
Console.js:61 ‚úÖ Immediate update completed successfully
Console.js:61 üöÄ immediateSuccess result: true
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 17, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚úÖ IMMEDIATE UPDATE strokeWidth = 17
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 17, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Force repaint renderAll() after timeout...
Console.js:61 üìù Canvas state saved. History length: 17, Current index: 16
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 17, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showMarkers = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showMarkers = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showMarkers Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 17, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showMarkers = true to chart line...
Console.js:61 Before: showMarkers = undefined
Console.js:61 showMarkers requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 17, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 17, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showMarkers = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìù Canvas state saved. History length: 18, Current index: 17
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 17, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 17, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showJunctions = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showJunctions = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showJunctions Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showJunctions = true to chart line...
Console.js:61 Before: showJunctions = undefined
Console.js:61 showJunctions requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showJunctions = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 üìù Canvas state saved. History length: 19, Current index: 18
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß Chart Designer - Handling chart line property update: showMarkers = true
Console.js:61 üîß Chart Designer - Calling chartUpdateRef for property: showMarkers = true
Console.js:61 === PROPERTY UPDATE DEBUG ===
Console.js:61 Property: showMarkers Value: true
Console.js:61 Selected chart line: null
Console.js:61 Chart line type: undefined
Console.js:61 Current lineProperties state: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 Active object from Fabric: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 üîß FALLBACK: Using active object as chart line
Console.js:61 BEFORE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 New properties object: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length before regeneration: 0
Console.js:61 üöÄ CALLING updateExistingChartLineImmediateWithObject now...
Console.js:61 --- IMMEDIATE UPDATE ATTEMPT ---
Console.js:61 Fabric canvas exists: true
Console.js:61 Chart line object exists: true
Console.js:61 Applying showMarkers = true to chart line...
Console.js:61 Before: showMarkers = undefined
Console.js:61 showMarkers requires regeneration - returning false
Console.js:61 üöÄ immediateSuccess result: false
Console.js:61 AFTER IMMEDIATE UPDATE - Chart line properties: {strokeWidth: 3, stroke: '#3b82f6', opacity: 1, visible: true, fill: ''}
Console.js:61 ‚ö†Ô∏è Immediate update failed, falling back to regeneration
Console.js:61 üîß CRITICAL: Data length BEFORE setTimeout: 0
Console.js:61 === END PROPERTY UPDATE DEBUG ===
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ REGENERATING chart with showMarkers = true
Console.js:61 üîÑ Passing properties to regeneration: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîß CRITICAL: Data length INSIDE setTimeout: 0
Console.js:61 üîÑ renderChartWithProperties called with: {strokeWidth: 3, opacity: 1, smoothness: 0.3, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üîÑ Current smoothness value: 0.3
Console.js:61 üîÑ Current showMarkers value: false
Console.js:61 üîÑ Current showJunctions value: false
Console.js:61 üîÑ Current strokeDashArray value: null
Console.js:61 ‚ùå ABORT renderChartWithProperties: data length is 0, waiting for data...
Console.js:61 üîç CHECKING: Is symbol and timeframe available? {symbol: 'AAPL', timeframe: '1Y'}
Console.js:61 üîÑ Attempting to reload data for regeneration...
Console.js:61 üìä Loading data for symbol: AAPL, timeframe: 1Y
Console.js:61 üìä API Response: isMultiSymbol=undefined, isMultiSymbolRequest=false
Console.js:61 üìä stockData.symbols: undefined
Console.js:61 üìä Loading single symbol data: AAPL
Console.js:61 üîç SETTING SINGLE-SYMBOL DATA - Length: 261
Console.js:61 üîÑ Data reloaded, retrying chart regeneration...
Console.js:61 üîç DATA STATE CHANGED - Length: 261 First item: {low: 335.39, date: '2024-08-13T00:00:00.000Z', high: 340.7, open: 337.73, close: 337.49,¬†‚Ä¶}
Console.js:61 üìä Rendering chart - isMultiSymbol: false symbols: undefined
Console.js:61 üìä Y-axis scaling: Symbol(s): AAPL, Range: $318.01 - $416.66, Data points: 261
Console.js:61 üéØ getCurveType called with smoothness: 0.3
Console.js:61 üìà Using monotone-X curve for clean financial lines
Console.js:61 üìä Generated single symbol path data with smoothness: 0.3 Path length: 11808
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object removed: undefined
Console.js:61 Object added: undefined
Console.js:61 Chart line selected
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line financial-chart-line
Console.js:61 chart-designer.tsx - State set to: financial-chart-line financial-chart-line
Console.js:61 Canvas selection updated: financial-chart-line
Console.js:61 chart-designer.tsx - handleElementSelect called with: financial-chart-line element
Console.js:61 chart-designer.tsx - State set to: financial-chart-line element
Console.js:61 Storing Y grid lines: 6
Console.js:61 Storing X grid lines: 4
Console.js:61 Sample Y grid line: i¬†{stroke: '#e5e7eb', dirty: true, strokeWidth: 0.5, selectable: false, evented: false,¬†‚Ä¶}dirty: trueevented: falseheight: 0left: 120opacity: 0.3selectable: falsestroke: "#e5e7eb"strokeWidth: 0.5top: 364.39451902865255type: "y-grid-line"visible: truewidth: 680x1: 120x2: 800y1: 364.39451902865255y2: 364.39451902865255[[Prototype]]: i
Console.js:61 Sample Y grid line stroke: #e5e7eb
Console.js:61 ‚ö†Ô∏è Source attribution already exists, skipping creation
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 Object added: undefined
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
Console.js:61 üìù Canvas state saved. History length: 20, Current index: 19
Console.js:61 ElementPropertiesPanel - selectedElement: i¬†{fill: '', dirty: false, stroke: '#3b82f6', strokeWidth: 3, strokeLineCap: 'round',¬†‚Ä¶}
Console.js:61 ElementPropertiesPanel - properties: {type: 'element', properties: {‚Ä¶}, updateFunction: ∆í}
Console.js:61 ElementPropertiesPanel - elementType: financial-chart-line
Console.js:61 ElementPropertiesPanel - isChartGroup: true
Console.js:61 ElementPropertiesPanel - properties.properties: {strokeWidth: 3, opacity: 1, smoothness: 0.5, color: '#3b82f6', visible: true,¬†‚Ä¶}
